# The following variables need to be set in Azure Devops:

# Azure
# - azure.subscription
# - azure.agentPoolName
# - azure.vm.resourceGroupName
# - azure.vm.windows.name
#
# Image build options
# - build.tags
# - build.pushMode
# - build.pruneImages
# - build.sitecoreVersion
# - build.sitecoreTopology
# - build.sitecoreWindowsVersion
# - build.includeSpe
# - build.includeSxa
# - build.includeJss
# - build.skipExistingImages
# - build.includeExperimentalImages

# Sitecore credentials
# - sitecore.username
# - sitecore.password
#
# Container registry
# - container.registry.password
# - container.registry.username
# - container.registry.fullname
#
# Windows:
# - windows.install.source.path
#
# Assets drive
# - assets.useDrive
# - (optional) assets.azure.fileshare.password
# - (optional) $AzureSharedFolderServer

trigger:
  batch: true
  branches:
    include:
    - master
schedules:
  - cron: "0 12 * * 0"
    displayName: Weekly Sunday build
    branches:
      include:
      - master
    always: true

stages:

  - stage: Build_Wndows_Images
    jobs:
      - job: Build_Windows_Images
        timeoutInMinutes: 720
        displayName: "Build Windows Images"
        pool:
          name: $(azure.agentPoolName)
        steps:
          - powershell: |

            condition: eq(variables['assets.useDrive'], 'true')
            displayName: "Connect Asset Drive (optional)"
          - task: Docker@2
            displayName: "Docker registry login"
            inputs:
              containerRegistry: "docker-registry"
              command: login
          - checkout: self
            clean: true
          - powershell: |
              "$(container.registry.password)" | docker login -u "$(container.registry.username)" --password-stdin $(container.registry.fullname)
              $buildProps = @{
                InstallSourcePath = "$(windows.install.source.path)"
                SitecoreUsername = "$(sitecore.username)"
                SitecorePassword = "$(sitecore.password)"
                Registry = "$(container.registry.fullname)"
                RegistryUserName = "$(container.registry.username)"
                RegistryPassword = "$(container.registry.password)"
                SitecoreVersion = "$(build.sitecoreVersion)"
                Topology = $(build.sitecoreTopology)
                OSVersion = "$(build.WindowsOSVersion)"
                IncludeSpe = [System.Convert]::ToBoolean($(build.includeSpe))
                IncludeSxa = [System.Convert]::ToBoolean($(build.includeSxa))
                IncludeJss = [System.Convert]::ToBoolean($(build.includeJss))
                IncludeExperimental = [System.Convert]::ToBoolean($(build.includeExperimentalImages))
                SkipExistingImage = [System.Convert]::ToBoolean($(build.skipExistingImages))
              }

              .\Build.ps1 @buildProps
            displayName: "Build Images"
          - powershell: |
                docker image prune --force
            condition: and(succeeded(), eq(variables['build.pruneImages'], 'true'))
            displayName: 'Prune images (optional)'